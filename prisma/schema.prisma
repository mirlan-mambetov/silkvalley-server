// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER ROLES ENUM
enum UserRoles {
  USER
  ADMIN
  MODERATOR
  SUPERUSER
  OWNER
}

//#### ORDER STATUS WITH ENUM
enum EnumStatusOrder {
  WAITING
  PAYED
  CANCELED
}

//#### ORDER STATUS WITH ENUM
enum EnumPaymentMethod {
  CACHE
  CARD
  MBANK
}
//#### USER
model Administration{
  id  Int @id @default(autoincrement())
  name String
  email String @unique()
  phoneNumber String @map("phone_number")
  password String
  avatar String? @default("/images/default-avatar.png")
  role UserRoles[] @default([USER])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("administrations")
}

model User{
  id  Int @id @default(autoincrement())
  name String
  email String @unique
  phoneNumber String @map("phone_number")
  password String
  avatar String? @default("/images/default-avatar.png")
  role UserRoles[] @default([USER])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
}

//#### ORDER
model Order {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  status EnumStatusOrder @default(WAITING)
  items OrderItem[]
  totalCache Int
  payment_type EnumPaymentMethod? @map("payment_type")
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  @@map("orders")
}

model OrderItem {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name String
  quantity Int
  price Int
  color String? 
  sizes String? 
  order Order @relation(fields: [orderId], references: [id])
  orderId Int @map("order_id")
  product Product @relation(fields: [productId], references: [id])
  productId Int @map("product_id")
  @@map("order_item")
}

//#### PRODUCT
model Product {
  id  Int @id @default(autoincrement())
  title String
  subtitle String @map("sub_title")
  description String 
  alias String @unique
  poster String
  price Int
  articleNumber String @unique @map("article_number")
  rating Int?
  video String? 
  discount Int?
  isHit Boolean? @map("is_hit") @default(false)
  isNew Boolean? @map("is_new") @default(false)
  quantity Int @default(1)
  sales Int? @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItem OrderItem[] 

  specifications Specification[]
  
  attributes ProductAttributes[]

  category Category? @relation(fields: [categoryid], references: [id])
  categoryid Int? @map("category_id")

  secondCategory SecondCategory? @relation(fields: [secondCategoryId], references: [id])
  secondCategoryId Int? @map("second_category_id")

  childsCategory ChildsCategories? @relation(fields: [childsCategoryId], references: [id])
  childsCategoryId Int? @map("childs_category_id")

  @@map("product")
}

//#### PRODUCT ATTRIBUTES
model Specification {
  id            Int @id @default(autoincrement())
  name          String 
  value   String
  product Product @relation(references: [id], fields: [productId])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("specification")
}

model ProductAttributes{
  id            Int @id @default(autoincrement())
  color String?
  size String?
  images String[]

  product Product @relation(references: [id], fields: [productId])
  productId Int

  @@map("product_attributes")
}

model Category {
  id            Int @id @default(autoincrement())
  name String @unique
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories SecondCategory[]

  products Product[]

  @@map("categories")
}

model SecondCategory {
  id            Int @id @default(autoincrement())
  name String
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int @map("category_id")
  
  childsCategories ChildsCategories[]

  @@map("second_category")
}

model ChildsCategories {
  id            Int @id @default(autoincrement())
  name String
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  
  parentCategory SecondCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId Int @map("parent_category_id")
  
  @@map("child_categories")
}