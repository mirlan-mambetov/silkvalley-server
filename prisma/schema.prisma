datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ### МОДЕЛЬ ЗАКАЗОВ
model Order {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  orderId      String             @unique()
  status       EnumStatusOrder    @default(WAITING)
  totalCache   Float
  payment_type EnumPaymentMethod? @map("payment_type")
  items        OrderItems[]
  userId       Int                @map("user_id")
  user         Users              @relation(fields: [userId], references: [id])
  address      OrderAddress?

  warehouseId  Int?               @map("warehouse_id")
  warehouse    Warehouse?         @relation(fields: [warehouseId], references: [id])
  @@map("orders")
}
// ### МОДЕЛЬ ВАРИАНТОВ ТОВАРА ЗАКАЗА
model OrderItems{
  id                                  Int                @id @default(autoincrement())
  createdAt                           DateTime           @default(now()) @map("created_at")
  updatedAt                           DateTime           @updatedAt @map("updated_at")

  orderId                             Int @map("order_id")
  productVariantId                    Int @map("product_variant_id")
  
  quantity                            Int
  price                               Float
  order             Order             @relation(fields: [orderId], references: [id])
  productVariant    ProductVariant    @relation(fields: [productVariantId], references: [id])
  
  @@unique([orderId, productVariantId])

  @@map("order_items")
}

// ### МОДЕЛЬ АДРЕСОВ ЗАКАЗОВ
model OrderAddress {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  orderId           Int?          @unique @map("order_id")
  name              String
  location          Location?
  order             Order?        @relation(fields: [orderId], references: [id])
  userAddressId     Int?          @map("user_address_id")
  userAddress       UserAddress?  @relation(fields: [userAddressId], references: [id])
  @@map("orders_address")
}


model Category {
  id             Int        @id @default(autoincrement())
  name           String     
  slug           String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  parentId       Int?       @map("parent_id")
  parentCategory Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  childs         Category[] @relation("CategoryToCategory")
  products ProductCategory[]
  image String? 
  icon String?

  @@map("category")
}

// ### МОДЕЛЬ АДРЕСОВ ПОЛЬЗОВАТЕЛЯ
model UserAddress {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  country           String?
  city              String
  road              String
  houseNumber       String    @map("house_number")
  postalCode        String?   @map("postal_code")
  location          Location?
  orderAddresses    OrderAddress[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  title             String
  subtitle          String              @map("sub_title")
  description       String
  slug              String              @unique
  poster            String
  categories        ProductCategory[]
  variants          ProductVariant[]
  promotionId       Int?                @map("promotion_id")
  promotion         Promotion?          @relation(fields: [promotionId], references: [id])

  // Next Update
  user              Users?              @relation(fields: [userId], references: [id])
  userId Int?       @map("user_id")

  // IN CURRENT UPDATE
  defaultPrice Int? @map("default_price")
  defaultSize String? @map("default_size")
  @@map("product")
}

model ProductVariant {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt 
  ordered           Int?

  color             Colors?
  price             Float
  size              String?
  articleNumber     String              @unique @map("article_number")
  stock             Int
  product           Product          @relation(fields: [productId], references: [id])
  productId         Int
  specifications    Specification[]
  rating            Int?
  discount          Int?
  isHit             Boolean?            @default(false) @map("is_hit")
  isNew             Boolean?            @default(false) @map("is_new")
  sales             Int?                @default(0)
  video             String?

  user              Users? @relation(fields: [userId],references: [id])
  userId            Int? @map("user_id") 
 
  orders            OrderItems[]
  orderId           Int?

  @@map("product_variant")
}
model Colors{
  id           Int              @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color String
  images String[]

  variant ProductVariant? @relation(fields: [variantId],references: [id])
  variantId Int? @map("variant_id") @unique
  @@map("colors")
}


model ProductCategory {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  productId Int @map("product_id")
  categoryId Int @map("category_id")

  product Product @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
  @@map("product_category")
}


model Specification {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variants  ProductVariant? @relation(fields: [variantsId],references: [id])
  variantsId Int?  @map("variants_id")
  @@map("specification")
}

model Promotion {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?
  discount    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(false)
  slug        String    @unique
  image       String
  imageSm     String @map("small_image")
  
  product     Product[]

  @@map("promotion")
}


model Users {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phoneNumber   String         @map("phone_number")
  password      String
  avatar        String?        @default("/images/default-avatar.png")
  role          UserRoles[]    @default([USER])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  orders        Order[]
  featureds     ProductVariant[]
  subscriptions Subscription[]
  coupons       Coupon[]
  products      Product[]

  @@map("users")
}

// ### МОДЕЛЬ КУПОНОВ ПОЛЬЗОВАТЕЛЯ
model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  discount   Float
  status     CouponStatus @default(PENDING)
  user       Users      @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("coupon")
}

// ### МОДЕЛЬ УВЕДОМЛЕНИЙ
model Subscription {
  id        Int               @id @default(autoincrement())
  userId    Int               @map("user_id")
  user      Users             @relation(fields: [userId], references: [id])
  type      NotificationType
  createdAt DateTime          @default(now())

  @@map("subscriptions")
}

// ### МОДЕЛЬ УВЕДОМЛЕНИЙ
model Notification {
  id           Int                  @id @default(autoincrement())
  message      String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  read         Boolean              @default(false)
  userId       Int?                 @map("user_id")
  type         NotificationType     @map("notification_type")
  user         Users?               @relation(fields: [userId], references: [id])

  @@map("notification")
}

// ### МОДЕЛЬ СКЛАДОВ
model Warehouse {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name      String
  location          Location?
  orders            Order[]
}


// ### МОДЕЛЬ ЛОКАЦИИ
model Location {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  lat              Float
  lng              Float

  warehouseId      Int?           @unique @map("warehouse_id")
  orderId          Int?           @unique @map("order_id")
  userAddressId    Int?           @unique @map("user_address_id")
  pointsDeliveryId Int?           @unique @map("points_delivery_location")

  warehous         Warehouse?  @relation(fields: [warehouseId], references: [id])
  order            OrderAddress?  @relation(fields: [orderId], references: [id])
  userAddress      UserAddress?   @relation(fields: [userAddressId], references: [id])

  @@map("location")
}

enum NotificationType {
  PROMOTION
  PRODUCT_PROMOTION
  ORDER_UPDATE
  ORDER_PLACE
}

enum UserRoles {
  USER
  ADMIN
  OWNER
}

enum CouponStatus {
  PENDING
  REDEEMED
  EXPIRED
}

enum EnumStatusOrder {
  WAITING
  PAYED
  CANCELED
}

enum EnumPaymentMethod {
  CACHE
  CARD
  MBANK
}
