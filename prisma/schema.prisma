generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phoneNumber   String         @map("phone_number")
  password      String
  avatar        String?        @default("/images/default-avatar.png")
  role          UserRoles[]    @default([USER])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  orders        Order[]

  @@map("users")
}

model Notification {
  id           Int                  @id @default(autoincrement())
  text         String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  expire       Boolean              @default(false)
  userId       Int?                 @map("user_id")
  typeOfNotify EnumTypeNotification @map("type_notification")
  user         Users?               @relation(fields: [userId], references: [id])

  @@map("notification")
}

model PointsDeliver {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  location  Location?

  @@map("points_deliver")
}

model Order {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  orderId      String             @unique
  status       EnumStatusOrder    @default(WAITING)
  totalCache   Int
  payment_type EnumPaymentMethod? @map("payment_type")
  userId       Int                @map("user_id")
  items        ProductVariant[]
  user         Users              @relation(fields: [userId], references: [id])
  address      OrderAddress?

  @@map("orders")
}

model OrderAddress {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  orderId   Int?      @unique @map("order_id")
  name      String
  location  Location?
  order     Order?    @relation(fields: [orderId], references: [id])

  @@map("orders_address")
}

model Location {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  lat              Float
  lng              Float
  orderId          Int?           @unique @map("order_id")
  pointsDeliveryId Int?           @unique @map("points_delivery_location")
  order            OrderAddress?  @relation(fields: [orderId], references: [id])
  pointsDelivery   PointsDeliver? @relation(fields: [pointsDeliveryId], references: [id])

  @@map("location")
}



model Product {
  id               Int                 @id @default(autoincrement())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  title            String
  subtitle         String              @map("sub_title")
  description      String
  slug             String              @unique
  poster           String
  categories       ProductCategory[]
  variants ProductVariant[]

  @@map("product")
}

model ProductVariant {
  id           Int              @id @default(autoincrement())
  color        Colors?
  price        Float
  size         String?
  articleNumber    String              @unique @map("article_number")
  stock Int
  product      Product          @relation(fields: [productId], references: [id])
  productId    Int
  specifications   Specification[]
  rating           Int?
  discount         Int?
  isHit            Boolean?            @default(false) @map("is_hit")
  isNew            Boolean?            @default(false) @map("is_new")
  sales            Int?                @default(0)
  video            String?
  promotionId      Int?                @map("promotion_id")
  promotion        Promotion?          @relation(fields: [promotionId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])
  orderId Int? @unique

  @@map("product_variant")
}
model Colors{
  id           Int              @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color String
  images String[]

  variant ProductVariant? @relation(fields: [variantId],references: [id])
  variantId Int? @map("variant_id") @unique
  @@map("colors")
}
model Category {
  id             Int        @id @default(autoincrement())
  name           String     
  slug           String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  parentId       Int?       @map("parent_id")
  parentCategory Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  childs         Category[] @relation("CategoryToCategory")
  products ProductCategory[]

  @@map("category")
}

model ProductCategory {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  productId Int @map("product_id")
  categoryId Int @map("category_id")

  product Product @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
  @@map("product_category")
}

model Specification {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variants  ProductVariant? @relation(fields: [variantsId],references: [id])
  variantsId Int?  @map("variants_id")
  @@map("specification")
}

model Promotion {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?
  discount    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(true)
  slug        String    @unique
  image       String
  product     ProductVariant[]

  @@map("promotion")
}

enum UserRoles {
  USER
  ADMIN
  MODERATOR
  SUPERUSER
  OWNER
}

enum EnumStatusOrder {
  WAITING
  PAYED
  CANCELED
}

enum EnumPaymentMethod {
  CACHE
  CARD
  MBANK
}

enum EnumTypeNotification {
  ORDER
  PAYMENT_METHOD
  PROMOTION
  PROFILE
}
